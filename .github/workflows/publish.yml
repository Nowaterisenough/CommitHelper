name: Publish VS Code Extension

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

# 添加权限配置
permissions:
  contents: write
  actions: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    # 编译项目
    - name: Compile
      run: npm run compile
    
    # 验证打包是否成功
    - name: Package extension
      run: npm run package
    
    # 上传构建产物供后续使用
    - name: Upload VSIX
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: '*.vsix'
        retention-days: 1

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    # 下载之前构建的VSIX文件
    - name: Download VSIX artifact
      uses: actions/download-artifact@v4
      with:
        name: vsix-package
        path: .
    
    # 获取上一个版本标签
    - name: Get previous tag
      id: previoustag
      run: |
        # 获取当前提交的标签（如果有）
        CURRENT_TAG=$(git tag --points-at HEAD | grep "^v" | head -n 1)
        echo "当前标签: $CURRENT_TAG"
        
        # 获取所有标签，按版本号排序（从新到旧）
        ALL_TAGS=$(git tag -l "v*" | sort -V -r)
        echo "所有标签:"
        echo "$ALL_TAGS"
        
        # 如果当前提交有标签，从列表中排除它
        if [ -n "$CURRENT_TAG" ]; then
          PREVIOUS_TAG=$(echo "$ALL_TAGS" | grep -v "^$CURRENT_TAG$" | head -n 1)
        else
          # 如果当前提交没有标签，获取最新的标签
          PREVIOUS_TAG=$(echo "$ALL_TAGS" | head -n 1)
        fi
        
        # 如果没有找到之前的标签，使用第一次提交
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          echo "没有找到之前的标签，使用第一次提交"
        fi
        
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "上一个版本: $PREVIOUS_TAG"
    
    # 生成更新日志
    - name: Generate changelog
      id: changelog
      run: |
        echo "生成更新日志..."
        
        # 获取自上个版本以来的提交信息
        if [ -n "${{ steps.previoustag.outputs.previous_tag }}" ]; then
          # 使用 --first-parent 避免包含合并的分支历史
          RAW_COMMITS=$(git log ${{ steps.previoustag.outputs.previous_tag }}..HEAD --pretty=format:"%s" --first-parent --no-merges)
        else
          RAW_COMMITS=$(git log --pretty=format:"%s" --first-parent --no-merges)
        fi
        
        # 去重并过滤
        COMMITS=$(echo "$RAW_COMMITS" | sort -u | grep -v "^chore: bump version" | grep -v "^Merge" | sed 's/^/- /')
        
        echo "提交记录:"
        echo "$COMMITS"
        
        # 按类型分类提交（使用更精确的正则表达式）
        FEATURES=$(echo "$COMMITS" | grep -E "^- feat(\([^)]*\))?:" || true)
        FIXES=$(echo "$COMMITS" | grep -E "^- fix(\([^)]*\))?:" || true)
        DOCS=$(echo "$COMMITS" | grep -E "^- docs(\([^)]*\))?:" || true)
        STYLES=$(echo "$COMMITS" | grep -E "^- style(\([^)]*\))?:" || true)
        REFACTORS=$(echo "$COMMITS" | grep -E "^- refactor(\([^)]*\))?:" || true)
        PERFS=$(echo "$COMMITS" | grep -E "^- perf(\([^)]*\))?:" || true)
        TESTS=$(echo "$COMMITS" | grep -E "^- test(\([^)]*\))?:" || true)
        CHORES=$(echo "$COMMITS" | grep -E "^- chore(\([^)]*\))?:" || true)
        OTHERS=$(echo "$COMMITS" | grep -vE "^- (feat|fix|docs|style|refactor|perf|test|chore)(\([^)]*\))?:" || true)
        
        # 去除类型前缀的函数
        remove_prefix() {
          echo "$1" | sed -E 's/^- (feat|fix|docs|style|refactor|perf|test|chore)(\([^)]*\))?: ?/- /'
        }
        
        # 生成更新日志内容
        CHANGELOG=""
        
        if [ -n "$FEATURES" ]; then
          CLEAN_FEATURES=$(remove_prefix "$FEATURES")
          CHANGELOG="${CHANGELOG}### 新功能\n$CLEAN_FEATURES\n\n"
        fi
        
        if [ -n "$FIXES" ]; then
          CLEAN_FIXES=$(remove_prefix "$FIXES")
          CHANGELOG="${CHANGELOG}### 修复\n$CLEAN_FIXES\n\n"
        fi
        
        if [ -n "$PERFS" ]; then
          CLEAN_PERFS=$(remove_prefix "$PERFS")
          CHANGELOG="${CHANGELOG}### 性能优化\n$CLEAN_PERFS\n\n"
        fi
        
        if [ -n "$REFACTORS" ]; then
          CLEAN_REFACTORS=$(remove_prefix "$REFACTORS")
          CHANGELOG="${CHANGELOG}### 重构\n$CLEAN_REFACTORS\n\n"
        fi
        
        if [ -n "$DOCS" ]; then
          CLEAN_DOCS=$(remove_prefix "$DOCS")
          CHANGELOG="${CHANGELOG}### 文档\n$CLEAN_DOCS\n\n"
        fi
        
        if [ -n "$TESTS" ]; then
          CLEAN_TESTS=$(remove_prefix "$TESTS")
          CHANGELOG="${CHANGELOG}### 测试\n$CLEAN_TESTS\n\n"
        fi
        
        if [ -n "$STYLES" ]; then
          CLEAN_STYLES=$(remove_prefix "$STYLES")
          CHANGELOG="${CHANGELOG}### 样式\n$CLEAN_STYLES\n\n"
        fi
        
        if [ -n "$CHORES" ]; then
          CLEAN_CHORES=$(remove_prefix "$CHORES")
          CHANGELOG="${CHANGELOG}### 杂项\n$CLEAN_CHORES\n\n"
        fi
        
        if [ -n "$OTHERS" ]; then
          CHANGELOG="${CHANGELOG}### 其他更新\n$OTHERS\n\n"
        fi
        
        # 如果没有更新内容，使用默认信息
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="### 维护更新\n- 例行维护和依赖更新\n"
        fi
        
        # 保存到文件（为了多行内容）
        echo -e "$CHANGELOG" > changelog_content.md
        
        # 输出到GitHub输出
        {
          echo 'changelog<<EOF'
          cat changelog_content.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
        echo "更新日志已生成"
    
    - name: Auto increment version
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "当前版本: $CURRENT_VERSION"
        
        npm version patch --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "新版本: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # 更新CHANGELOG.md文件
        CHANGELOG_ENTRY="## [${NEW_VERSION}] - $(date +%Y-%m-%d)\n\n$(cat changelog_content.md)"
        
        # 检查CHANGELOG.md是否存在
        if [ ! -f CHANGELOG.md ]; then
          echo -e "# 更新日志\n\n所有版本的更新内容都记录在此文件中。\n" > CHANGELOG.md
        fi
        
        # 读取现有的 CHANGELOG 内容
        if [ -f CHANGELOG.md ]; then
          # 查找第一个版本标题的位置（## [x.x.x]）
          FIRST_VERSION_LINE=$(grep -n "^## \[" CHANGELOG.md | head -n 1 | cut -d: -f1)
          
          if [ -n "$FIRST_VERSION_LINE" ]; then
            # 如果找到版本标题，在它之前插入新版本
            {
              # 保留文件头部（版本标题之前的内容）
              head -n $((FIRST_VERSION_LINE - 1)) CHANGELOG.md
              # 添加新版本内容
              echo -e "$CHANGELOG_ENTRY"
              echo ""  # 添加空行分隔
              # 添加剩余内容（从第一个版本开始）
              tail -n +$FIRST_VERSION_LINE CHANGELOG.md
            } > CHANGELOG.tmp.md
          else
            # 如果没有找到版本标题，在文件末尾添加
            {
              cat CHANGELOG.md
              echo ""  # 添加空行
              echo -e "$CHANGELOG_ENTRY"
            } > CHANGELOG.tmp.md
          fi
          
          # 替换原文件
          mv CHANGELOG.tmp.md CHANGELOG.md
        else
          # 如果文件不存在，创建新文件
          {
            echo "# 更新日志"
            echo ""
            echo "所有版本的更新内容都记录在此文件中。"
            echo ""
            echo -e "$CHANGELOG_ENTRY"
          } > CHANGELOG.md
        fi
        
        # 提交更改
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json CHANGELOG.md
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || exit 0
        git tag "v$NEW_VERSION"
        git push origin HEAD:${{ github.ref_name }}
        git push origin "v$NEW_VERSION"
    
    # 重新打包扩展（使用新版本号）
    - name: Repackage extension with new version
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      run: |
        echo "使用新版本号重新打包扩展..."
        npm run package
        echo "重新打包的文件:"
        ls -la *.vsix
    
    # 验证VSIX文件
    - name: Check package size
      run: |
        echo "当前目录中的VSIX文件:"
        ls -la *.vsix
        
        # 设置VSIX文件名环境变量
        VSIX_FILE=$(ls *.vsix | head -n 1)
        echo "vsix_file=$VSIX_FILE" >> $GITHUB_ENV
        
        FILE_SIZE=$(du -h "$VSIX_FILE" | cut -f1)
        echo "扩展包大小: $FILE_SIZE"
        
        # 获取文件大小（字节）
        SIZE_BYTES=$(stat -c%s "$VSIX_FILE" 2>/dev/null || stat -f%z "$VSIX_FILE" 2>/dev/null)
        SIZE_MB=$(echo "scale=2; $SIZE_BYTES / 1048576" | bc)
        
        echo "文件: $VSIX_FILE"
        echo "大小: $FILE_SIZE ($SIZE_MB MB)"
        
        # 验证文件名是否包含正确的版本号
        if [[ "${{ steps.version.outputs.new_version }}" != "" ]]; then
          EXPECTED_VERSION="${{ steps.version.outputs.new_version }}"
          if [[ "$VSIX_FILE" == *"$EXPECTED_VERSION"* ]]; then
            echo "✅ VSIX文件版本号正确: $EXPECTED_VERSION"
          else
            echo "⚠️  VSIX文件版本号可能不匹配，预期: $EXPECTED_VERSION，实际文件: $VSIX_FILE"
          fi
        fi
        
        # 如果大于5MB则警告
        if (( $(echo "$SIZE_MB > 5" | bc -l) )); then
          echo "::warning::扩展包大小超过5MB，可能需要进一步优化"
        fi
    
    - name: Publish to VS Code Marketplace
      run: |
        echo "发布到 VS Code Marketplace..."
        echo "当前 package.json 版本: $(node -p "require('./package.json').version")"
        echo "当前目录中的 VSIX 文件:"
        ls -la *.vsix
        npx @vscode/vsce publish -p $VSCE_PAT
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
    
    # 创建GitHub Release - 使用新的softprops/action-gh-release
    - name: Create Release
      # 当自动创建了新版本时，或者由tag触发时
      if: steps.version.outputs.new_version || startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version || github.ref_name }}
        name: Release v${{ steps.version.outputs.new_version || github.ref_name }}
        body: |
          ## Commit Helper v${{ steps.version.outputs.new_version || github.ref_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ---
          
          ### 安装方式
          
          **方式1：VS Code 扩展市场**
          在VS Code扩展面板搜索 "Commit Helper" 或访问 [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=NoWaterisEnough.commit-helper)
          
          **方式2：手动安装**
          下载下方的 `.vsix` 文件，然后在VS Code中运行命令：
          ```
          code --install-extension commit-helper-v${{ steps.version.outputs.new_version || github.ref_name }}.vsix
          ```
          
          ### 完整更新日志
          查看 [CHANGELOG.md](https://github.com/Nowaterisenough/CommitHelper/blob/main/CHANGELOG.md)
        files: |
          *.vsix
        draft: false
        prerelease: false